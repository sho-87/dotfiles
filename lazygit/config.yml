gui:
  screenMode: "normal" # one of 'normal' | 'half' | 'full' default is 'normal'
  scrollHeight: 2 # how many lines you scroll by
  scrollPastBottom: true # enable scrolling past the bottom
  scrollOffMargin: 2 # how many lines to keep before/after the cursor when it reaches the top/bottom of the view; see 'Scroll-off Margin' section below
  scrollOffBehavior: "margin" # one of 'margin' | 'jump'; see 'Scroll-off Margin' section below
  sidePanelWidth: 0.3333 # number from 0 to 1
  expandFocusedSidePanel: false
  mainPanelSplitMode: "flexible" # one of 'horizontal' | 'flexible' | 'vertical'
  enlargedSideViewLocation: "left" # one of 'left' | 'top'
  language: "en"
  timeFormat: "02 Jan 06" # https://pkg.go.dev/time#Time.Format
  shortTimeFormat: "3:04PM"
  authorColors:
    "*": "#b6927b"
  theme:
    activeBorderColor:
      - "#c4746e"
      - bold
    inactiveBorderColor:
      - "#DCD7BA"
    searchingActiveBorderColor:
      - "#a292a3"
      - bold
    optionsTextColor:
      - "#658594"
    selectedLineBgColor:
      - "#2A2A37"
    selectedRangeBgColor:
      - "#4e6773"
    cherryPickedCommitBgColor:
      - "#8ea4a2"
    cherryPickedCommitFgColor:
      - "#658594"
    unstagedChangesColor:
      - "#b98d7b"
    defaultFgColor:
      - default
  commitLength:
    show: true
  mouseEvents: true
  skipDiscardChangeWarning: false
  skipStashWarning: false
  showFileTree: true # for rendering changes files in a tree format
  showListFooter: true # for seeing the '5 of 20' message in list panels
  showRandomTip: false
  showBranchCommitHash: true # show commit hashes alongside branch names
  showBottomLine: false # for hiding the bottom information line (unless it has important information to tell you)
  showPanelJumps: true # for showing the jump-to-panel keybindings as panel subtitles
  showCommandLog: true
  nerdFontsVersion: "3" # nerd fonts version to use ("2" or "3"); empty means don't show nerd font icons
  showFileIcons: true
  commandLogSize: 8
  splitDiff: "auto" # one of 'auto' | 'always'
  skipRewordInEditorWarning: false # for skipping the confirmation before launching the reword editor
  border: "rounded" # one of 'single' | 'double' | 'rounded' | 'hidden'
  animateExplosion: true # shows an explosion animation when nuking the working tree
  portraitMode: "auto" # one of 'auto' | 'never' | 'always'
git:
  paging:
    colorArg: always
    useConfig: false
  commit:
    signOff: false
  log:
    # one of date-order, author-date-order, topo-order or default.

    # topo-order makes it easier to read the git log graph, but commits may not

    # appear chronologically. See https://git-scm.com/docs/git-log#_commit_ordering
    order: "date-order"
    # one of always, never, when-maximised

    # this determines whether the git graph is rendered in the commits panel
    showGraph: "always"
    # displays the whole git graph by default in the commits panel (equivalent to passing the `--all` argument to `git log`)

    showWholeGraph: true
  skipHookPrefix: WIP
  # The main branches. We colour commits green if they belong to one of these branches,

  # so that you can easily see which commits are unique to your branch (coloured in yellow)
  mainBranches: [main, master]
  autoFetch: true
  autoRefresh: true
  fetchAll: true # Pass --all flag when running git fetch. Set to false to fetch only origin (or the current branch's upstream remote if there is one)
  branchLogCmd: "git log --graph --color=always --abbrev-commit --decorate --date=relative --pretty=medium {{branchName}} --"
  allBranchesLogCmd: "git log --graph --all --color=always --abbrev-commit --decorate --date=relative --pretty=medium"
  overrideGpg: false # prevents lazygit from spawning a separate process when using GPG
  disableForcePushing: false
  parseEmoji: true
os:
  copyToClipboardCmd: "" # See 'Custom Command for Copying to Clipboard' section
  editPreset: "nvim" # see 'Configuring File Editing' section
  open: "code {{filename}}"
notARepository: "skip" # one of: 'prompt' | 'create' | 'skip' | 'quit'
customCommands:
  - key: "<c-e>"
    description: "Push to a specific remote repository"
    context: localBranches
    loadingText: "Pushing ..."
    prompts:
      - type: "menuFromCommand"
        title: "Which remote repository to push to?"
        command: nu -c "git remote --verbose | rg '(push)'"
        filter: '(?P<remote>.*)\s+(?P<url>.*) \(push\)'
        key: "Remote"
        valueFormat: "{{ .remote }}"
        labelFormat: "{{ .remote | bold | cyan }} {{ .url }}"
      - type: "menu"
        title: "How to push?"
        key: "PushType"
        options:
          - value: "push"
          - value: "push --force-with-lease"
          - value: "push --force"
    command: "git {{ .Form.PushType | quote }} {{ .Form.Remote }}"
  - key: "<c-C>"
    context: "global"
    description: "Create new conventional commit"
    prompts:
      - type: "menu"
        key: "Type"
        title: "Type of change"
        options:
          - name: "feat"
            description: "A new feature"
            value: "feat"
          - name: "fix"
            description: "A bug fix"
            value: "fix"
          - name: "test"
            description: "Adding missing tests or correcting existing tests"
            value: "test"
          - name: "chore"
            description: "Other changes that don't modify src or test files"
            value: "chore"
          - name: "perf"
            description: "A code change that improves performance"
            value: "perf"
          - name: "refactor"
            description: "A code change that neither fixes a bug nor adds a feature"
            value: "refactor"
          - name: "style"
            description: "Changes that do not affect the meaning of the code"
            value: "style"
          - name: "revert"
            description: "Reverts a previous commit"
            value: "revert"
          - name: "docs"
            description: "Documentation only changes"
            value: "docs"
          - name: "build"
            description: "Changes that affect the build system or external dependencies"
            value: "build"
          - name: "ci"
            description: "Changes to CI configuration files and scripts"
            value: "ci"
      - type: "input"
        title: "Scope - Add '<scope>'"
        key: "Scope"
        initialValue: ""
      - type: "input"
        title: "Summary"
        key: "Summary"
        initialValue: ""
      - type: "input"
        title: "Description"
        key: "Description"
        initialValue: ""
      - type: "confirm"
        key: "Confirm"
        title: "Commit"
        body: "Are you sure you want to commit?"
    command: 'git commit -m "{{.Form.Type}}{{if .Form.Scope}}({{.Form.Scope}}){{end}}: {{.Form.Summary}}"{{if .Form.Description}} -m "{{.Form.Description}}"{{end}}'
    loadingText: "Creating conventional commit..."
  - key: 'f'
    command: 'git fetch --prune'
    context: 'remotes'
    description: 'Fetch and prune remote branches'
    loadingText: 'Fetching and pruning...'
    stream: true
  - key: 'S'
    context: 'remoteBranches'
    description: 'Sync branch with upstream'
    loadingText: 'Syncing with upstream...'
    stream: true
    command: |
      git fetch {{.SelectedRemote.Name}}
      git checkout {{ .SelectedRemoteBranch.Name }}
      git merge {{ .SelectedRemote.Name }}/{{ .SelectedRemoteBranch.Name }}
      git push origin {{.SelectedRemoteBranch.Name}}
keybinding:
  universal:
    prevBlock-alt: '<c-k>' # goto the previous block / panel
    nextBlock-alt: '<c-j>' # goto the next block / panel
    nextTab: 'l'
    prevTab: 'h'
  commits:
    moveDownCommit: 'J' # move commit down one
    moveUpCommit: 'K' # move commit up one
